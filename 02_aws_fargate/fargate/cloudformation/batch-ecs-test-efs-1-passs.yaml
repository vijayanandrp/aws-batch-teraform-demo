AWSTemplateFormatVersion: '2010-09-09'
Description: ETL 2.0 batch resources stack
Parameters:
  pOwner:
    Description: Owning Team
    Type: String
    Default: etl
    AllowedValues:
    - etl
    - sec
    - ttp
  pAppName:
    Description: AppName
    Type: String
    Default: s3encdemo01
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: Miscellaneous
        Parameters: 
          - pOwner
          - pAppName
    ParameterLabels: 
      pOwner: 
        default: "Owning Team"
      pAppName:
        default: "AppName"
Mappings:
  TargetAccountMap:
    '506457898372': 
      Name: Infosec 
      Env: is  
      VpcCidr: 10.5.0.0/16    

    '727212345168':
      Name: Prod
      NameLowerCase: prod
      Env: pd
      AppSubnet1C: subnet-00a87b26dfc6a872a
      AppSubnet1D: subnet-0f67229b941639ab2
      DataSubnet1C: subnet-0dbe0f539130237fc
      DataSubnet1D: subnet-0af34512ddd6c6b3b
      BatchServiceRole: arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      VpcCidr: 10.1.0.0/16

    '917500451843':
      Name: Test
      NameLowerCase: test
      Env: ts
      AppSubnet1C: subnet-033214d4f26fbf6cc
      AppSubnet1D: subnet-0f924d5623687fff8
      DataSubnet1C: subnet-0b49acce78cf57505
      DataSubnet1D: subnet-0efcf45df9f524ac4
      BatchServiceRole: arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      VpcCidr: 10.2.0.0/16
      VpcId: vpc-02075c56872868448

    '697350684613':
      Name: Dev
      NameLowerCase: dev
      Env: dv
      AppSubnet1C: subnet-00af991b775e92eb8
      AppSubnet1D: subnet-018f6b67507a505fb
      DataSubnet1C: subnet-0e1517e3186c22b27
      DataSubnet1D: subnet-0a286cca9ac3e403a
      BatchServiceRole: arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      VpcCidr: 10.3.0.0/16

    '799092822660':     
      Name: SSC     
      Env: ss 

    '541890059215': 
      Name: Transit 
      Env: tx 

  mTargetEnvMap:
    prod:
      acct: '727212345168'
      Name: prod
      Env: pd      
    test:
      acct: '917500451843'
      Name: test
      Env: ts
    dev:
      acct: '697350684613'
      Name: dev
      Env: dv
    ssc:
      acct: '799092822660'  
      Name: ssc     
      Env: ss
    transit: 
      acct: '541890059215'
      Name: transit 
      Env: tx   
    infosec:
      acct: '506457898372'  
      Name: infosec     
      Env: is
      VpcCidr: 10.5.0.0/16 

Resources: 
  EFSFileSystemResource:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode:  "generalPurpose"
      ThroughputMode: "bursting"
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_7_DAYS
      FileSystemTags:
        - 
          Key: Name
          Value: !Sub "${pAppName}-efs"
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientRootAccess"
              - "elasticfilesystem:ClientWrite"
            Principal:
                AWS: '*'
            Condition:
              Bool:
                'aws:SecureTransport': 'true'
      KmsKeyId: !GetAtt KMSKey.Arn
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - 'kms:*'
            Resource: 
              - '*'

 
  EFSAccessPointResource:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref EFSFileSystemResource
      RootDirectory: 
          Path: "/"
          # Path: !Sub "/${pAppName}"


  # EFSMountTargetResourceAppSubnet1C:
  #   Type: AWS::EFS::MountTarget
  #   Properties:
  #     FileSystemId: !Ref EFSFileSystemResource
  #     SubnetId: !FindInMap [TargetAccountMap, !Ref 'AWS::AccountId', AppSubnet1C]
  #     SecurityGroups:
  #       - !Ref EFSSecurityGroup

  # EFSMountTargetResourceAppSubnet1D:
  #   Type: AWS::EFS::MountTarget
  #   Properties:
  #     FileSystemId: !Ref EFSFileSystemResource
  #     SubnetId: !FindInMap [TargetAccountMap, !Ref 'AWS::AccountId', AppSubnet1D]
  #     SecurityGroups:
  #       - !Ref EFSSecurityGroup
  
  # EFSMountTargetResourceDataSubnet1C:
  #   Type: AWS::EFS::MountTarget
  #   Properties:
  #     FileSystemId: !Ref EFSFileSystemResource
  #     SubnetId: !FindInMap [TargetAccountMap, !Ref 'AWS::AccountId', DataSubnet1C]
  #     SecurityGroups:
  #       - !Ref EFSSecurityGroup

  EFSMountTargetResourceDataSubnet1D:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystemResource
      SubnetId: !FindInMap [TargetAccountMap, !Ref 'AWS::AccountId', DataSubnet1D]
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:  !Sub "${pAppName}-sg"
      GroupDescription: FileSystem Security Group
      VpcId: !FindInMap [TargetAccountMap, !Ref 'AWS::AccountId', VpcId]
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          Description: "All protocols"
          IpProtocol: "-1"
        - 
          CidrIpv6: "::/0"
          Description: "All protocols"
          IpProtocol: "-1"
      SecurityGroupIngress:
        - 
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          Description: "https from service one"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
        - 
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          Description: "nfs from service one"
          FromPort: 2049
          IpProtocol: "tcp"
          ToPort: 2049
  
  EC2SecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
          GroupDescription: "Security group for VPC endpoints"
          GroupName: !Sub "${pAppName}-vpc-endpoint"
          VpcId: !FindInMap [TargetAccountMap, !Ref 'AWS::AccountId', VpcId]
          SecurityGroupEgress: 
            - 
              CidrIp: "0.0.0.0/0"
              Description: "egress ports"
              FromPort: 0
              IpProtocol: "tcp"
              ToPort: 65535

  
  